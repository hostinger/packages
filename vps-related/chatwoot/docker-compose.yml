version: '3.9'

services:
  traefik:
    image: traefik:latest
    command:
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.traefik.address=:8080
      - --certificatesresolvers.letsencrypt.acme.email=admin@example.com
      - --certificatesresolvers.letsencrypt.acme.storage=/acme.json
      - --certificatesresolvers.letsencrypt.acme.httpChallenge.entryPoint=web
      - --api.dashboard=true
      - --log.level=DEBUG
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./acme.json:/acme.json
    networks:
      - chatwoot-net
    restart: always

  base: &base
    image: chatwoot/chatwoot:latest
    env_file: .env
    volumes:
      - ./data/storage:/app/storage
    networks:
      - chatwoot-net

  rails:
    <<: *base
    depends_on:
      - postgres
      - redis
    entrypoint: docker/entrypoints/rails.sh
    command: ['bundle', 'exec', 'rails', 's', '-p', '3000', '-b', '0.0.0.0']
    labels:
      - traefik.enable=true
      - traefik.http.routers.chatwoot.rule=Host(`example.com`)
      - traefik.http.routers.chatwoot.entrypoints=websecure
      - traefik.http.routers.chatwoot.tls.certresolver=letsencrypt
      - traefik.http.services.chatwoot.loadbalancer.server.port=3000
    networks:
      - chatwoot-net

  sidekiq:
    <<: *base
    depends_on:
      - postgres
      - redis
    command: ['bundle', 'exec', 'sidekiq', '-C', 'config/sidekiq.yml']
    networks:
      - chatwoot-net

  postgres:
    image: pgvector/pgvector:pg16
    environment:
      - POSTGRES_DB=chatwoot_production
      - POSTGRES_USER=chatwoot
      - POSTGRES_PASSWORD=your_postgres_password
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    restart: always
    networks:
      - chatwoot-net

  redis:
    image: redis:alpine
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    env_file: .env
    volumes:
      - ./data/redis:/data
    restart: always
    networks:
      - chatwoot-net

volumes:
  data:
  postgres_data:
  redis_data:

networks:
  chatwoot-net:
